Add to Udemy

Cons of SQL DB

	Not quite flexible. Consider a user table with firstName, lastName and address. If a user wants email as well rest of the rows will have NULL.
	
With NoSQL DB like Mongo we store JSON style objects. It's more flexible.

SQL DB is good at establishing relationships.

To store data that has lots of relationships SQL is better.

One of the biggest advantage of using NoSQL is scalability. Instead of doing vertical scaling we can have distributed systems.

A nice comparison has been provided. Consider the most popular SQL DB - MySQL and NoSQL one - MongoDB

SQL     - More Mature, Table Structure,		Requires a Schema / Structure - No of tables, Columns etc. Great with Relationships - it's faster, Scales Vertically
NoSQL   - New,		   Document Structure,  Flexible to changes



******* MONGO DB ********


Download MongoDB

$ cd ~
$ pwd
$ touch .bash_profile
$ ls -a
$ vim .bash_profile

Once vim opens press i to enter insert mode.

Once we add PATH

enter esc then :wq! and enter


Now to create a data directory

$ mkdir -p /data/db

Give permission using

$ sudo chown arsrivastava /data/db


CRUD in MongoDB

To start

$mongod

If address is already in use then 

$mongod --port 27018

In a new tab type 

$ mongo

>

at any point we can type help to assist.

> help

> show dbs

To create a DB

> use shopDB

In order to be listed it needs some content

CRUD operations

To create we can use 

> db.collection.createOne()   where collection name is provided. If collection doesn't exist then it's created.

Inside we pass JS objects

like

> db.emp.insertOne(
	{
		name: 'Ankur',
		age: '36'
	}
)


Collections in Mongo are similar to Tables

db.products.insertOne(
	{
		_id: 1,
		name: 'Pen',
		price: 300
	}
)


> show collections
products


READ DATA

> db.products.find(query)

here query is optional. It's like the find method of JS

> db.products.find()

It works like JSON search. Where we specify things using key-value. We can also specify conditions using $gt $lt etc.

> db.products.find({ price: { $gt: 1 } })


We can specify the fields that we want find to return using a second argument called projection

> db.products.find( { name: 'Pen' }, { price: 1 } )

here 1 means return this field. 0 means no.  _id comes by default unless we project it as false or 0.

UPDATE DATA

> db.products.updateOne( { _id:1 }, {$set: { price: 400 }})


DELETE DATA

db.products.deleteMany({status: 'false'})

db.products.deleteOne({name:'Pen})


RELATIONSHIPS IN MONGODB

If we have a scenario of ONE to MANY like for a Product we have many Reviews then we can use embedded array. Like

db.products.insert({
	_id: 3,
	name: 'Shoe',
	review: [
		{
			author:'Ankur',
			rating:1
		},
		{
			author:'Jack',
			rating:5
		}
	]
})


MONGODB with NODE

The most popular way to use MongoDB with Node is by using Object Document Model library cally Mongoose. And not the native library.