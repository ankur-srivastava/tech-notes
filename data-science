Tabular Data and Data Formats

Data can be available in structured, unstructured and semi-structured formats. 

Pandas library makes it easy to work with structured data. It's an open source Python library that provides powerful data structures and tools for data analysis and manipulation.

Key features of Pandas library:

1. Provides an efficient DataFrame object.
2. Lets you read and load data from different formats like CSV file, Excel file etc.
3. Lets you handle the missing data efficiently.
4. Helps transform data.
5. Allows data to be manipulated easily via insertion, slicing etc.
6. Highly optimized for performance, with critical code paths written in Cython or C.

Installation instructions are available at http://pandas.pydata.org/pandas-docs/stable/install.html


Pandas Series

If you want to create a one-dimensional labeled data set then you can use series. It's like a labeled array.

Code

	import pandas as pd
	import numpy as np
	data = np.array(['Jack',35,'US'])
	s = pd.Series(data,index=['Name','Age','Country'])
	print (s)

Output

	Name 	Jack
	Age  	35
	Country US
	

Pandas Data Frame
Its a 2 dimensional data structure with rows and columns. 


The Map Function
Map let's us to apply a function to each element in a sequence.
r = map(func, seq) where seq represents a sequence.

# using map()
print('-----map function-----')
mydata = (10,20,30)

def squareMyData(num):
    return (num*num)

squaredData = list(map(squareMyData, mydata))
print(squaredData)


The Filter Function
Filter allows us to filter data. We pass a function and we get the data for which function returns true.

# using filter()
print('-----filter function-----')
filterdata = (10,25,30)
def checkEven(n):
    if(n % 2 == 0):
        return 1
    return 0
filtereddata = list(filter(checkEven, filterdata))
print(filtereddata)


The Reduce Function
This function works on each value in the input sequence and returns a single value.

# using reduce()
print('-----reduce function-----')
print(reduce(lambda x,y: x+y, [2,4,6]))




Python Numpy Package

Numpy stands for Numerical Python. It allows us to work with multi dimensional arrays. Like we can add arrays, substract arrays etc.
We can also perform mathematical operations like linear algebra and random number generation.

Data science is largely about the manipulation of (often large) collections of numbers. To support effective data science a language needs a way to do this efficiently. Python lists are suboptimal because they are heterogeneous collections of object references; the objects in turn have reference counts for garbage collection, type info, size info, and the actual data. 

Thus storing a list of a four 32-bit integers, rather than requiring just 16 bytes requires much more. Furthermore there is typically poor locality of the items referenced from the list, leading to cache misses and other performance problems. Python does offer an array type which is homogeneous and improves on lists as far as storage goes, but it offers limited operations on that data.

NumPy bridges the gap, offering both efficient storage of homogeneous data in single or multi-dimensional arrays, and a rich set of computationally -efficient operations on that data.

Pandas is a library built on top of NumPy that is particularly well-suited to manipulating tabular data i.e. higher dimension data. The Pandas library provides this type of representation of data, along with the types of operations more typical in data science applications, like indexing, filtering and aggregation. There are two primary classes it provides for this, Series and DataFrame.

Pandas Series - A Pandas Series is a one-dimensional array of indexed data.


To use numpy in your code you can add:

import numpy as np
	
	

----1 Jan 2019----

Reference : https://scipy.org/


Core packages for Scientific purpose:
    Numpy
    SciPy
    Matplotlib
    IPython
    Sympy
    Pandas


Continue Notes then append to home.

NumPy library  provides us with two methods to create a range of values that are evenly spaced. Like if we need a sequence like 2,4,6 etc. there are two ways:
np.arange(start, end, increment)
np.linspace(start, end, no_of_elements)

np.logspace can be used to distribute elements logarithmically.

Meshgrid Array

For generating multidimensional coordinate grids we can use np.meshgrid.

Ex:
	X = np.array([2,3,4])
	Y = np.array([5,6,7])
	a,b = np.meshgrid(X,Y)

	Output
	a = ([
			[2,3,4],
			[2,3,4],
			[2,3,4]
		])
	b = ([
			[5,5,5],
			[6,6,6],
			[7,7,7]
		])
		
np.empty is also handy if we just want to declare an array without initializing it. This can save some time.
But using np.zeros is better.


Create Arrays for Matrices
NumPy provides methods to create Matrices. Like identity matrix -> np.identity(3) will create an identity matrix with diagonal elements 1.
To construct a matrix with an arbitrary one-dimensional array on the diagonal, we can use the np.diag function


We can access the array elements using indices. Like e = a[2] 
Now within the brackets we can use various formats to extract data.

Let's talk about 1-D arrays. Slicing can be done to select range of elements. We can use negative integers to extract elements from the end of the array. Like x = a[-2]

Look at the following slice examples:
a[m:n] selects elements in the array starting at m and ending at (n-1).
a[m:n:2] selects elements in the array starting at m and ending at (n-1) in increments of 2.
a[::-1] selects all elements in reverse order.
a[-5:] selects last 5 elements.

Example : 
In  : a[1:-1:2]
Out : array([1, 3, 5, 7, 9])


Let's talk about multi-dimensional array. In this case we can apply the slicing operation on each axis. Lets use lambda function and apply it on a 6*6 array.

In  : f = lambda m, n: n + 10 * m
In  : a = np.fromfunction(f, (6, 6), dtype=int)
In  : a
Out : array([   [ 0,  1,  2,  3,  4,  5],
                [10, 11, 12, 13, 14, 15],
                [20, 21, 22, 23, 24, 25],
                [30, 31, 32, 33, 34, 35],
                [40, 41, 42, 43, 44, 45],
                [50, 51, 52, 53, 54, 55]
			])

Look at the following slice examples:
a[:,1] gives us the second column i.e. [1,11,21,31,41,51]
a[2:,:2] gives ([
					[20,21],
					[30,31],
				])

Views
When we perform slice operation then the resulting array also points to orginal array. If we update this new array then it will impact original one as well.
This improves the performance because we are not creating a new array.
But if we use the copy method then its treated as a separate array. Like np.copy

Fancy Indexing
If we want to index elements of a NumPy array with elements from another array then we can use Fancy indexing concept.
Like if we have an array
	a = [2,3,4]
	b = [1,2]
	
	a[b] will give us [3,4]
	
These arrays are not views but independent arrays. 

NOTE - In safari notes I have added a highlight for visual representation.


Reshaping and Resizing
Sometimes rearranging arrays can be helpful. Like arranging a N*N matrix as a vector of size N^2.
Some of the functions that NumPy provides to reshape an ndarray are:
np.ndarray.flatten : Create a new 1-D array. Collapses all dimensions to just one.
np.reshape : Reshape an n-dim array.
np.squeeze : Removes axes with length 1.
np.ravel : Similar to flatten but modifies original.
np.transpose

Example

In	: data = np.array([[1, 2], [3, 4]])
In	: np.reshape(data, (1, 4)) 	// Creates a new array
Out	: array([[1, 2, 3, 4]])
In	: data.reshape(4) 			// Modifies existing one
Out	: array([1, 2, 3, 4])

Generally the NumPy library gives two options - either modify existing array or create a new one.


To add dimensions we can use np.reshape and np.newaxis (when adding an empty axis).

If our requirement is to use arrays to create bigger arrays then methods like np.vstack (vertical stacking of arrays), np.hstack, np.concatenate come in handy.

Ex 
	IN  :a = [1,2]
	IN  :np.vstack(a,a)
	OUT :[
			[1,2],
			[1,2],
			[1,2]
		]
		
NumPy arrays cannot be changed once they are created. The functions np.append, np.insert, and np.delete create a new array in which the data is copied. Due to the overhead of creating new arrays and copying the data, it is usually a good idea to preallocate arrays with size such that they do not later need to be resized.

Arithmentic Operations on Matrices
We can perform standard arithmetic operations on Matrices. 

Ex
	 In : x = np.array([[1, 2], [3, 4]])
	 In : y = np.array([[5, 6], [7, 8]])
	 In : x + y
	 Out: array([[ 6,  8],
	                  [10, 12]])
					  
If we multiply a matrix with a scalar then it will apply to all the elements of the matrix.

When we apply an arithmetic operation then we get a new array. This can impact memory footprint and also degrade performance. It's better to use inplace operation in such cases.

Like 
	x = x + y // uses __add__
	x += y    // uses __iadd__ which is an in place operator

Refer to - https://stackoverflow.com/questions/4772987/how-are-python-in-place-operator-functions-different-than-the-standard-operator


Similar behavior is observed for other mathematical operations like Trignometric, Logarithmic etc. Vectorized operations are applied and we get a new array as a result.


Aggregate Functions

We can perform aggregate operations using NumPy like taking sum of all array elements or finding the mean, median, standard deviation etc. We can specify the axis also along which operation needs to be performed. 

Like  a.sum(axis=0)

Set Operations
NumPy also provides the capability to work with a sets. A set is used to store unique, unordered elements. NumPy provides a set of functions to work on a set of elements.
Like np.unique can be used to get a set of unique elements. 
	a = np.unique([1, 2, 3, 3])
We can perform union, intersection etc. operations between two given sets.


NumPy also provides methods to sort an array or to get it's transpose.
np.sort
np.transpose


Matrix
NumPy provides a set of functions that can be applied to Matrices, Vectors etc. Like np.dot and np.cross
Currently there is no operator for denoting matrix multiplication,4 and instead the NumPy function np.dot is used for this purpose.

Summary
NumPy is a core library for computing with Python that provides a foundation for nearly all computational libraries for Python. Familiarity with the NumPy library and its usage patterns is a fundamental skill for using Python for scientific and technical computing.


Skipping chapters on Matplotlib etc. and jumping to CH 12





Data Processing and Analysis

When it comes to analysing data Pandas is the default library of choice. It's a key component when it comes to data analysis. 

Pandas provides data structures for working with tabular data. Plus it helps us to clean the raw data.

It is built on top of NumPy and provides additional features which makes working with data easier. 

Features:
Handling missing data
Alignment of data
Labeled indexing - This helps in fetching data.
	
It is especially used for data representation and preparation. For more involved statistical analysis and modeling, there are other packages available, like scikit-learn.
We can also use Seaborn library which is built on top of Matplotlib. The Seaborn library is a visualization library for statistical graphics. 
This library provides quick and convenient graphing of data represented as pandas data structure (or NumPy arrays).

To get started:

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

Pandas provides two main data structures : Series and DataFrame

